pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // Monta o socket do Docker para acesso ao host
    }
  }

  environment {
    GIT_REPO_NAME = "Jenkins-Zero-To-Hero-main"
    GIT_USER_NAME = "JorgeMJNT"
    DOCKER_IMAGE = "jorgejardimneto/ultimate-cicd:${env.BUILD_NUMBER}"
    SONAR_URL = "http://3.12.154.218:9000"
  }

  stages {

    stage('Checkout') {
      steps {
        sh 'echo "Checkout stage passed"'
        // git branch: 'main', url: 'https://github.com/JorgeMJNT/Jenkins-Zero-To-Hero-main.git'
      }
    }

    stage('Build and Test') {
      steps {
        sh '''
          set -e
          echo "Listing files..."
          ls -ltr
          echo "Building the project..."
          cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
          mvn clean package
        '''
      }
    }

    stage('Static Code Analysis (SAST) - SonarQube') {
      steps {
        withCredentials([string(credentialsId: 'sonar', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            set -e
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar -Dsonar.login=${SONAR_AUTH_TOKEN} -Dsonar.host.url=${SONAR_URL}
          '''
        }
      }
    }

    stage('SCA - OWASP Dependency-Check') {
      steps {
        script {
          sh '''
              set -e
              echo "Instalando OWASP Dependency-Check..."
              curl -sLO https://github.com/jeremylong/DependencyCheck/releases/download/v9.0.9/dependency-check-9.0.9-release.zip
              unzip dependency-check-9.0.9-release.zip
              export PATH=$PATH:$(pwd)/dependency-check/bin

              echo "Rodando análise de dependências..."
              dependency-check.sh --project "meu-projeto" --scan java-maven-sonar-argocd-helm-k8s/spring-boot-app --format HTML --out reports/

              echo "Análise concluída! Salvando resultados..."
          '''
        }
      }
      post {
        always {
          archiveArtifacts artifacts: 'reports/**', fingerprint: true
        }
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        script {
          withCredentials([string(credentialsId: 'docker-cred', variable: 'DOCKER_TOKEN')]) {
            sh '''
              set -e
              echo "Logging into Docker..."
              echo ${DOCKER_TOKEN} | docker login -u jorgejardimneto --password-stdin

              echo "Building Docker image..."
              cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
              docker build -t ${DOCKER_IMAGE} .

              echo "Pushing Docker image..."
              docker push ${DOCKER_IMAGE}

              echo "Logging out of Docker..."
              docker logout
            '''
          }
        }
      }
    }

    stage('Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'git', variable: 'GITHUB_TOKEN')]) {
          sh '''
            set -e
            echo "Configuring Git..."
            git config user.email "jjardimneto@gmail.com"
            git config user.name "JorgeMJNT"

            echo "Updating deployment file..."
            sed -i -e "s|ultimate-cicd:.*|ultimate-cicd:${env.BUILD_NUMBER}|" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${env.BUILD_NUMBER}"

            echo "Pulling latest changes..."
            git pull --rebase origin main

            echo "Pushing changes to repository..."
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }
  }
}
