pipeline {
    agent {
        docker {
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        GIT_REPO_NAME = "Jenkins-Zero-To-Hero-main"
        GIT_USER_NAME = "JorgeMJNT"
        DOCKER_IMAGE = "jorgejardimneto/ultimate-cicd:${env.BUILD_NUMBER}"
        SONAR_URL = "http://3.141.4.91:9000"
        PROJECT_NAME = "spring-boot-demo"
    }

    stages {

        stage('Checkout') {
            steps {
                sh 'echo "Checkout stage passed"'
            }
        }

        stage('Build and Test') {
            steps {
                sh '''
                    set -e
                    echo "Listing files..."
                    ls -ltr
                    echo "Building the project..."
                    cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                    mvn clean verify package -DskipTests=false
                '''
            }
        }

        stage('Static Code Analysis (SAST) - SonarQube') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh '''
                        cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        mvn sonar:sonar \
                            -Dsonar.projectKey=${PROJECT_NAME} \
                            -Dsonar.host.url=${SONAR_URL} \
                            -Dsonar.login=$SONAR_AUTH_TOKEN
                    '''
                }
            }
        }

        stage('Container Security Scan - Trivy') {
            steps {
                sh '''
                    echo "Running Trivy vulnerability scan..."
                    docker pull ${DOCKER_IMAGE}
                    trivy image --severity HIGH,CRITICAL --format json -o trivy-report.json ${DOCKER_IMAGE}
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'trivy-report.json', fingerprint: true
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    withDockerRegistry([credentialsId: 'docker-cred', url: 'https://index.docker.io/v1/']) {
                        sh '''
                            set -e
                            echo "Building Docker image..."
                            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                            docker build -t ${DOCKER_IMAGE} .

                            echo "Pushing Docker image..."
                            docker push ${DOCKER_IMAGE}
                        '''
                    }
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                withCredentials([string(credentialsId: 'git', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        set -e
                        echo "Configuring Git..."
                        git config user.email "jjardimneto@gmail.com"
                        git config user.name "JorgeMJNT"

                        echo "Fetching latest changes..."
                        git fetch origin main
                        git pull --rebase origin main || echo "No updates needed"

                        echo "Updating deployment file..."
                        sed -i -e "s|ultimate-cicd:.*|ultimate-cicd:${env.BUILD_NUMBER}|" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

                        git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${env.BUILD_NUMBER}"

                        echo "Pushing changes to repository..."
                        git push https://x-access-token:${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
                    '''
                }
            }
        }
    }
}